#coding=utf-8

# 功能：将json转成class
# 依赖：
# 	1. quicktype
#   2. type.json 模板

import os
import json
import sys

cachePageContent = {}
cacheExistPageClasses = {}

generateHeader = '''/*
  Don't edit.
  Code generated by type.py.
 */

import 'dart:convert';
'''

def parseContent(path):
	tag = ""
	block = ""
	for line in open(path, 'r'):
		line = line.strip()
		if len(line) == 0 or line[0:2] == "//":
			parseTagAndBlock(tag, block)
			block = ""
			tag = line
		else:
			block += line

	if block:
		parseTagAndBlock(tag, block)

	saveToFile()



def parseTagAndBlock(tag, block):
	if block == "":
		return

	if len(tag) == 0 or tag[0:2] != "//":
		print("error data format: \n" + tag + block + "\n")
		return

	jsonObject = json.loads(tag[2:])
	name = jsonObject["name"]
	page = jsonObject["page"]

	if os.path.exists("./" + page) and page not in cacheExistPageClasses:
		# print("Model [" + name + "] is not generated, cause file [" + page + "] already exists\n")
		parseThePage(page)

	if page in cacheExistPageClasses and name in cacheExistPageClasses[page] and cacheExistPageClasses[page][name].startswith("//keep") :
		return
		# print("edit mode: " + model)
	else:
		if isWindows():
			model = os.popen("echo " + block + " | quicktype -l Dart --coders-in-class --top-level " + name).read()
		else:
			model = os.popen("echo '" + block + "' | quicktype -l Dart --coders-in-class --top-level " + name).read()

		importLib = "import 'dart:convert';"
		index = model.find(importLib)
		model = model[index + len(importLib):]

	if page in cachePageContent:
		cachePageContent[page] += model
	else:
		cachePageContent[page] = model

def parseThePage(page):
	className = ""
	classContent = ""
	if page not in cacheExistPageClasses:
		cacheExistPageClasses[page] = {}
	isStart = False
	for line in open("./" + page, 'r'):
		if line.startswith("class") or line.startswith("//"):
			if not isStart:
				isStart = True
				classContent = line
			else:
				classContent += line
			if line.startswith("class"):
				className = line[6:-3]
		elif line.startswith("}"):
			classContent += line
			cacheExistPageClasses[page][className] = classContent
			isStart = False
			# print("class: %s, content: %s" % (className, classContent))
		else:
			classContent += line

def saveToFile():
	for key in cacheExistPageClasses.keys():
		for key2 in cacheExistPageClasses[key].keys():
			if cacheExistPageClasses[key][key2].startswith("//keep"):
				cachePageContent[key] += "\n" + cacheExistPageClasses[key][key2]

	for key in cachePageContent.keys():
		content = generateHeader + cachePageContent[key]
		tmpFile = open(key, mode="w+")
		tmpFile.write(content)
		tmpFile.flush()
		tmpFile.close()

def isWindows():
	return sys.platform.startswith("win")

def start():
	file = "./type.json"
	if len(sys.argv) > 1:
		file = sys.argv[1]
	parseContent(file)

start()
